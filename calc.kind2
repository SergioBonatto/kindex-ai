// --TODO: define appropriate data types for failure/success
// --TODO: add support for more operations
// main = undefined
//
// data Expr
//   = Val Integer
//   | Add Expr
//         Expr
//   | Mul Expr
//         Expr
//   | Sub Expr
//         Expr
//   deriving (Show)
type Expr {
  val (n: Data.Nat)
  add (a: Expr) (b: Expr)
  mul (a: Expr) (b: Expr)
  sub (a: Expr) (b: Expr) 
  
}

// data Token
//   = Token Expr
//   | Op String
//   deriving (Show)
type Token <a> {
  token (e: Expr)
  op (s: Data.String)
}

// ops :: [(Char, Integer)]
// ops = [('+', 0), ('-', 0), ('*', 1)]
Ops :  ( Data.List (Data.Pair Data.Char Data.Nat)) 
Ops = [(Data.Pair.new '+' 0n), (Data.Pair.new '-' 0n), (Data.Pair.new'*' 1n)]

// eval :: String -> Integer
// eval str = evalh $ unwrap $ transform $ tokenize $ normalize str
Eval (s: Data.String) : Data.Nat

// evalh :: Expr -> Integer
// evalh (Val val) = val
// evalh (Add expr1 expr2) = evalh expr1 + evalh expr2
// evalh (Mul expr1 expr2) = evalh expr1 * evalh expr2
// evalh (Sub expr1 expr2) = evalh expr1 - evalh expr2
Evalh (e : Expr): Data.Nat
Evalh (Expr.val val) = val
Evalh (Expr.add expr1 expr2) = Data.Nat.add (Evalh(expr1))  (Evalh(expr2))
Evalh (Expr.mul expr1 expr2) = Data.Nat.mul (Evalh(expr1))  (Evalh(expr2))
Evalh (Expr.sub expr1 expr2) = Data.Nat.sub (Evalh(expr1))  (Evalh(expr2))


// unwrap :: [Token] -> Expr
// unwrap [Token expr] = expr
#partial
Unwrap (xs: Data.List Token) : Expr
Unwrap (Data.List.cons (Token.token expr) Data.List.nil) = expr

// transform :: [Token] -> [Token]
// transform tks =
//   if (idx == -1)
//     then tks
//     else transform
//            ((take (idx - 1) tks) ++
//             [binaryTransform (tks !! (idx - 1)) (tks !! idx) (tks !! (idx + 1))] ++
//             (drop (idx + 2) tks))
//   where
//     idx = highestPrecedenceIdx tks
Transform (xs: Data.List Token) : Data.List Token
// Transform (xs) =
//   // if (idx == -1n)
//     // then xs
//     // else
//   let  idx = HighestPrecedenceIdx (xs)
//   (Transform
//     (Data.List.concat (Data.List.concat ((Data.List.take (idx - 1n) xs)
//             [BinaryTransform (xs !! (idx - 1n)) (xs !! idx) (xs !! (idx + 1n))])
//             (Data.List.drop (idx + 2n) xs))))
  // where

// binaryTransform :: Token -> Token -> Token -> Token
// binaryTransform (Token left) (Op "*") (Token right) = Token (Mul left right)
// binaryTransform (Token left) (Op "+") (Token right) = Token (Add left right)
// binaryTransform (Token left) (Op "-") (Token right) = Token (Sub left right)
BinaryTransform (left: Token) (op: Token) (right: Token) : Token
BinaryTransform (Token.token left) (Token.op "*") (Token.token right) = Token (Expr.mul left right)

//
// highestPrecedenceIdx :: [Token] -> Int
// highestPrecedenceIdx tks =
//   if (maximum xs == -1)
//     then -1
//     else head $ filter ((== maximum xs) . (xs !!)) [0 ..]
//   where
//     xs = precedenceMap tks
HighestPrecedenceIdx (xs: Data.List Token) : Data.Nat


// precedenceMap :: [Token] -> [Integer]
// precedenceMap tks =
//   map
//     (\t ->
//        case t of
//          (Op [a]) -> getPrecedence a
//          t -> -1)
//     tks
//
// getPrecedence :: Char -> Integer
// getPrecedence c = snd $ head $ filter (\(op, prec) -> c == op) ops
//
// tokenize :: String -> [Token]
// tokenize str
//   | length str == matchL = [Token (Val (read str))]
//   | otherwise =
//     (Token (Val (read val))) :
//     (Op [str !! matchL]) : (tokenize (drop (matchL + 1) str))
//   where
//     val = takeWhile (\c -> null (filter (\(op, prec) -> c == op) ops)) str
//     matchL = length val
//
// normalize :: String -> String
// normalize [] = ""
// normalize (s:str)
//   | s == ' ' = normalize str
//   | otherwise = s : (normalize str)

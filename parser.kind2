#derive[match]
type Term {
  true
  false
  // zero
  // succ   (t: Term)
  // pred   (t: Term)
  // iszero (t: Term)
  tif    (cond: Term) (tp: Term) (fp: Term)
}

type Value {
  true
  false
  // num (n: Num)
}

type Types {
  Bool
  Nat 
  If (t1: Term) (t2: Term) (t3: Term)
}

type Num {
  zeroval
  succval (n: Num)
}

type Le (n: Data.Nat) ~ (m: Data.Nat) {
    n : Le n n
    S <m: Data.Nat> (pred: (Le n m)) : (Le n (Data.Nat.succ m))
} 

type Step ~(a: Term) (k: Term) {
  if_true  (t2: Term) (t3: Term) : Step (Term.tif Term.true  t2 t3) t2 
  if_false (t2: Term) (t3: Term) : Step (Term.tif Term.false t2 t3) t3
  sif (cond1: Term) (cond2: Term) (t2: Term) (t3: Term) (s1: Step cond1 cond2): Step (Term.tif cond1 t2 t3) (Term.tif cond2 t2 t3) 
}

Typed.aux (t: Term)           : Types
Typed.aux Term.true           = Types.Bool
Typed.aux Term.false          = Types.Bool
// Typed.aux Term.zero           = Types.Nat
// Typed.aux (Term.succ t1)      = Types.Nat
// Typed.aux (Term.pred t1)      = Types.Nat
// Typed.aux (Term.iszero t1)    = Types.Bool
Typed.aux (Term.tif t1 t2 t3) = Types.If t1 t2 t3

Consts (e: Term)            : Data.List (Term)
Consts (Term.true)          = [Term.true]
Consts (Term.false)         = [Term.false]
// Consts (Term.zero)          = [Term.zero]
// Consts (Term.succ t1)       = Consts(t1)
// Consts (Term.pred t1)       = Consts(t1)
// Consts (Term.iszero t1)     = Consts(t1)
Consts (Term.tif t1 t2 t3)  = Data.List.concat (Consts(t1)) (Data.List.concat (Consts(t2)) (Consts(t3)))

Consts.num (e: Term)            : Data.Nat
Consts.num (Term.true)          = 1n
Consts.num (Term.false)         = 1n
// Consts.num (Term.zero)          = 1n
// Consts.num (Term.succ t1)       = Consts.num (t1)
// Consts.num (Term.pred t1)       = Consts.num (t1)
// Consts.num (Term.iszero t1)     = Consts.num (t1)
Consts.num (Term.tif t1 t2 t3)  = Data.Nat.add (Consts.num (t1)) (Data.Nat.add (Consts.num (t2)) (Consts.num (t3)))

Length 
  <t> 
  (xs: Data.List t) 
  (ys: Data.List t) 
  : (Prop.Equal 
      (Data.Nat.add (Data.List.length (xs)) (Data.List.length (ys))) 
      (Data.List.length (Data.List.concat (xs) (ys))))
Length Data.List.nil ys                     = Prop.Equal.refl
Length (Data.List.cons xs.head xs.tail) ys  = 
    let ind = Length xs.tail ys
    let app = Prop.Equal.apply (x => (Data.Nat.succ x)) ind
    app

Lemma1 (e: Term)            : Prop.Equal (Data.List.length (Consts e)) (Consts.num e)
Lemma1 Term.true            = Prop.Equal.refl
Lemma1 Term.false           = Prop.Equal.refl
// Lemma1 Term.zero            = Prop.Equal.refl
// Lemma1 (Term.succ t1)       = Lemma1 t1
// Lemma1 (Term.pred t1)       = Lemma1 t1
// Lemma1 (Term.iszero t1)     = Lemma1 t1
Lemma1 (Term.tif t1 t2 t3)  =
  let ind1 = Lemma1 t1
  let ind2 = Lemma1 t2
  let ind3 = Lemma1 t3
  let app1 = Prop.Equal.mirror (Length (Consts t1) (Data.List.concat (Consts t2) (Consts t3)))
  let app2 = Prop.Equal.mirror (Length (Consts t2) (Consts t3))
  let rwt1 = Prop.Equal.rewrite (app2) (x => (Prop.Equal _ (Data.Nat.add (Data.List.length _ (Consts t1)) (x)))) app1
  let rwt2 = Prop.Equal.rewrite (ind1) (x => (Prop.Equal _ (Data.Nat.add x _))) rwt1
  let rwt3 = Prop.Equal.rewrite (ind2) (x => (Prop.Equal _ (Data.Nat.add _ (Data.Nat.add x _)))) rwt2
  let rwt4 = Prop.Equal.rewrite (ind3) (x => (Prop.Equal _ (Data.Nat.add _ (Data.Nat.add _ x)))) rwt3
  rwt4

Size (e: Term)            : Data.Nat
Size (Term.true)          = 1n
Size (Term.false)         = 1n
// Size (Term.zero)          = 1n
// Size (Term.succ t1)       = (Data.Nat.succ (Size(t1)))
// Size (Term.pred t1)       = (Data.Nat.succ (Size(t1)))
// Size (Term.iszero t1)     = (Data.Nat.succ (Size(t1)))
Size (Term.tif t1 t2 t3)  = (Data.Nat.succ (Data.Nat.add (Size (t1)) (Data.Nat.add (Size(t2)) (Size(t3)))))

Depth (e: Term)           : Data.Nat
Depth (Term.true)         = 1n
Depth (Term.false)        = 1n
// Depth (Term.zero)         = 1n
// Depth (Term.succ t1)      = (Data.Nat.succ (Depth(t1)))
// Depth (Term.pred t1)      = (Data.Nat.succ (Depth(t1)))
// Depth (Term.iszero t1)    = (Data.Nat.succ (Depth(t1)))
Depth (Term.tif t1 t2 t3) = (Data.Nat.succ (Data.Nat.max (Depth(t1)) (Data.Nat.max (Depth(t2)) (Depth(t3)))))

// 3.3.3
Size.le_depth (t: Term)           : (Le (Consts.num t) (Size t))
Size.le_depth Term.true           = Le.n
Size.le_depth Term.false          = Le.n
// Size.le_depth Term.zero           = Le.n
// Size.le_depth (Term.succ t1)      = Le.S (Size.le_depth t1)
// Size.le_depth (Term.pred t1)      = Le.S (Size.le_depth t1)
// Size.le_depth (Term.iszero t1)    = Le.S (Size.le_depth t1)
Size.le_depth (Term.tif t1 t2 t3) =
  let ind1 = Size.le_depth t1
  let ind2 = Size.le_depth t2
  let ind3 = Size.le_depth t3
  let app1 = Le.n (Data.Nat.add (Consts.num t1) (Data.Nat.add (Consts.num t2) (Consts.num t3)))
  let rwt1 = Le.rewrite (ind1) (x => (Le _ (Data.Nat.add x _))) app1
  let rwt2 = Le.rewrite (ind2) (x => (Le _ (Data.Nat.add _ (Data.Nat.add x _)))) rwt1
  let rwt3 = Le.rewrite (ind3) (x => (Le _ (Data.Nat.add _ (Data.Nat.add _ x)))) rwt2
  Le.S rwt3

#partial
Le.rewrite <a: Data.Nat> <b: Data.Nat> (e: Le a b) -(p: Data.Nat -> Type) (x: p a) : p b
Le.rewrite a b (Le.n k) p x = x :: p k
// Le.rewrite a b (Le.S k) p x = caso errado

#partial
Le.trans
  <n: Data.Nat>
  <m: Data.Nat>
  <o: Data.Nat>
  (l: Le n m) (e2: Le m o)
  : Le n o
Le.trans n m o l (Le.n x)                   = l :: Le n x
Le.trans n m (Data.Nat.succ o) l (Le.S (x)) = Le.S (Le.trans n m o l x)

Le.plus_left
  <n: Data.Nat>
  <m: Data.Nat>
  <k: Data.Nat>
  (l: Le n m)
  : Le (Data.Nat.add n k) (Data.Nat.add m k)
Le.plus_left n m k (Le.n x) = Le.n (Data.Nat.add x k)
Le.plus_left n (Data.Nat.succ m) k (Le.S x) = Le.S (Le.plus_left n m k x)
Le.plus_left n  Data.Nat.zero    k l =
  let lz = Le.n n
  let ls = Le.n 0n
  let lk = Le.n (Data.Nat.add 0n k)
  let rwtn = Prop.Equal.rewrite (Prop.Equal.mirror (Add.zero_right n)) (x => Le x 0n) l
  let indl = Ind.le n k rwtn
  indl

Ind.le (n: Data.Nat) (k: Data.Nat) (l: Le (Data.Nat.add n Data.Nat.zero) Data.Nat.zero) : Le (Data.Nat.add n k) k
Ind.le n Data.Nat.zero l     = l
Ind.le n (Data.Nat.succ k) l = 
  let ind = (Ind.le n k l)
  let app = Le.S ind
  Ind.le.aux n k app

#partial
Ind.le.aux (n: Data.Nat) (k:Data.Nat) (l: Le (Data.Nat.add n k) (Data.Nat.succ k)): Le (Data.Nat.add n (Data.Nat.succ k)) (Data.Nat.succ k)
Ind.le.aux Data.Nat.zero k l = Le.n (Data.Nat.succ k)
// Ind.le.aux (Data.Nat.succ n) k l = impossivel

Zero.le (n: Data.Nat): Le 0n n
Zero.le Data.Nat.zero = Le.n
Zero.le (Data.Nat.succ n) =
  let ind = Zero.le n
  let app = Le.S ind
  app

Sempre.zero (n: Data.Nat)     : Data.Sigma Data.Nat (t => Prop.Equal (Data.Nat.add n t) n)
Sempre.zero Data.Nat.zero     = Data.Sigma.new 0n Prop.Equal.refl
Sempre.zero (Data.Nat.succ n) = 
  let ind = Sempre.zero n
  let adz = Add.zero_right n
  let app = Prop.Equal.apply (x => Data.Nat.succ x) adz
  Data.Sigma.new 0n app

Add.zero_right (n: Data.Nat): Prop.Equal (Data.Nat.add n 0n) n
Add.zero_right Data.Nat.zero = Prop.Equal.refl
Add.zero_right (Data.Nat.succ n) = 
  let ind = Add.zero_right n
  let app = Prop.Equal.apply (x => Data.Nat.succ x) ind
  app

// #partial
Eval (e: Term)                    : Term
Eval (Term.tif Term.true t1 t2)   = t1
Eval (Term.tif Term.false t1 t2)  = t2
Eval (Term.tif t1 t2 t3)          = Term.tif (Eval t1) t2 t3
// Eval (Term.succ t1)               = Term.succ (Eval t1)
// Eval (Term.pred Term.zero)        = Term.zero
// Eval (Term.pred (Term.succ t1))   = t1
// Eval (Term.pred t1)               = Term.pred (Eval t1)
// Eval (Term.iszero Term.zero)      = Term.true
// Eval (Term.iszero (Term.succ t1)) = Term.false
// Eval (Term.iszero t1)             = Term.iszero (Eval t1)
Eval e                            = e             
// Eval (Term.true)                  = Term.true
// Eval (Term.false)                 = Term.false
// Eval (Term.zero)                  = Term.zero

Lemma354.aux (t1: Term) (t2: Term) (ty: Step t1 t2 )  : Data.Either Term Term
Lemma354.aux t1 t2 (Step.if_true t3 t4)               = Data.Either.left t3
Lemma354.aux t1 t2 (Step.if_false t3 t4)              = Data.Either.left t4
Lemma354.aux t1 t2 (Step.sif t3 t4 t5 t6 step1)       = Data.Either.right (Term.tif t3 t4 (Eval t2))

#partial
Lemma354 
  (t1: Term) 
  (t2: Term) 
  (t3: Term)
  (tx: Step t1 t2) 
  (ty: Step t1 t3)
  : Prop.Equal t2 t3
Lemma354 t1 t2 t3 (Step.if_true t4 t5) (Step.if_true t6 t7) =
  let eq1 = Prop.Equal.refl :: Prop.Equal t2 t4
  let eq2 = Prop.Equal.refl :: Prop.Equal t6 t3
  let eq3 = Prop.Equal.refl :: Prop.Equal t1 (Term.tif Term.true t6 t7)
  let eq4 = Prop.Equal.refl :: Prop.Equal t1 (Term.tif Term.true t4 t5)
  let ch1 = Prop.Equal.chain  (Prop.Equal.mirror eq3) eq4
  let app = Prop.Equal.apply  (x => (Eval x)) ch1
  let ch1 = (Prop.Equal.chain eq1 (Prop.Equal.mirror app))
  Prop.Equal.chain ch1 eq2
Lemma354 t1 t2 t3 (Step.if_true t4 t5) (Step.if_false t6 t7) = 
  let eq1 = Prop.Equal.refl :: Prop.Equal t4 t2
  let eq2 = Prop.Equal.refl :: Prop.Equal t7 t3
  let eq3 = Prop.Equal.refl :: Prop.Equal t1 (Term.tif Term.true  t4 t5)
  let eq4 = Prop.Equal.refl :: Prop.Equal t1 (Term.tif Term.false t6 t7)
  let ch1 = Prop.Equal.chain  (Prop.Equal.mirror eq3) eq4
  let app = Prop.Equal.apply  (x => (Eval x)) ch1
  let ch1 = Prop.Equal.chain  (Prop.Equal.mirror eq1) app
  Prop.Equal.chain ch1 eq2
Lemma354 t1 t2 t3 (Step.if_false t4 t5) (Step.if_true t6 t7) =
  let eq1 = Prop.Equal.refl :: Prop.Equal t5 t2
  let eq2 = Prop.Equal.refl :: Prop.Equal t6 t3
  let eq3 = Prop.Equal.refl :: Prop.Equal t1 (Term.tif Term.false t4 t5)
  let eq4 = Prop.Equal.refl :: Prop.Equal t1 (Term.tif Term.true  t6 t7)
  let ch1 = Prop.Equal.chain  (Prop.Equal.mirror eq3) eq4
  let app = Prop.Equal.apply  (x => (Eval x)) ch1
  let ch1 = Prop.Equal.chain  (Prop.Equal.mirror eq1) app
  Prop.Equal.chain ch1 eq2
Lemma354 t1 t2 t3 (Step.if_false t4 t5) (Step.if_false t6 t7) =
  let eq1 = Prop.Equal.refl :: Prop.Equal t5 t2
  let eq2 = Prop.Equal.refl :: Prop.Equal t7 t3
  let eq3 = Prop.Equal.refl :: Prop.Equal t1 (Term.tif Term.false t4 t5)
  let eq4 = Prop.Equal.refl :: Prop.Equal t1 (Term.tif Term.false t6 t7)
  let ch1 = Prop.Equal.chain  (Prop.Equal.mirror eq3) eq4
  let app = Prop.Equal.apply  (x => (Eval x)) ch1
  let ch1 = Prop.Equal.chain  (Prop.Equal.mirror eq1) app
  Prop.Equal.chain ch1 eq2
Lemma354 (Term.tif t1 t12 t13) t2 t3 (Step.sif cond1 cond1_ true1 false1 step1) (Step.sif cond2 cond2_ true2 false2 step2) =
  let eq1 = Prop.Equal.refl :: Prop.Equal t2 (Term.tif cond1_ true1 false1)
  let eq2 = Prop.Equal.refl :: Prop.Equal t3 (Term.tif cond2_ true2 false2)
  let eq3 = Prop.Equal.refl :: Prop.Equal cond1  t1
  let eq4 = Prop.Equal.refl :: Prop.Equal cond2  t1
  let eq5 = Prop.Equal.refl :: Prop.Equal true1  t12
  let eq6 = Prop.Equal.refl :: Prop.Equal true2  t12
  let eq7 = Prop.Equal.refl :: Prop.Equal false1 t13
  let eq8 = Prop.Equal.refl :: Prop.Equal false2 t13
  let ch1 = Prop.Equal.chain eq3 (Prop.Equal.mirror eq4)
  let ch2 = Prop.Equal.chain eq5 (Prop.Equal.mirror eq6)
  let ch3 = Prop.Equal.chain eq7 (Prop.Equal.mirror eq8)
  let rw1 = Prop.Equal.rewrite   (Prop.Equal.mirror ch2) (x => Prop.Equal _ (Term.tif cond2_ x false2)) eq2
  let rw2 = Prop.Equal.rewrite   (Prop.Equal.mirror ch3) (x => Prop.Equal _ (Term.tif cond2_ _ x)) rw1
  let ch4 = Prop.Equal.chain     (Prop.Equal.mirror eq2) rw2
  let rw3 = Prop.Equal.rewrite   (ch2) (x => Prop.Equal _ (Term.tif cond1_ x false1)) eq1
  let rw4 = Prop.Equal.rewrite   (ch3) (x => Prop.Equal _ (Term.tif cond1_ _ x)) rw3
  let ch5 = Prop.Equal.chain     (Prop.Equal.mirror eq1) rw4
  let pfr = Cond.is_eql ch2 ch3 ch4 ch5
  let tst = Prop.Equal.rewrite pfr (x => Prop.Equal _ (Term.tif x true2 false2)) eq2
  Prop.Equal.chain rw4 (Prop.Equal.mirror tst)
// Lemma354 (Term.tif t1 t12 t13) t2 t3 (Step.if_false t4 t5) (Step.sif t6 Term.false t8 t9 step1) =
  // let eq1 = Prop.Equal.refl :: Prop.Equal t1 Term.false
  // let eq2 = Prop.Equal.refl :: Prop.Equal (Term.tif Term.false t8 t9) t3
  // let eq3 = Prop.Equal.refl :: Prop.Equal t4  t12
  // let eq4 = Prop.Equal.refl :: Prop.Equal t5  t13
  // let eq5 = Prop.Equal.refl :: Prop.Equal t6  t1
  // let eq6 = Prop.Equal.refl :: Prop.Equal t8  t12
  // let eq7 = Prop.Equal.refl :: Prop.Equal t13 t9
  // let eq8 = Prop.Equal.refl :: Prop.Equal t2  t5
  // let chn = Prop.Equal.chain  (Prop.Equal.chain eq8 eq4) eq7
  // let rw1 = Prop.Equal.rewrite (Prop.Equal.mirror chn) (x => Prop.Equal (Term.tif Term.false t8 x) t3) eq2

  // let ev1 = Prop.Equal.apply (x => (Eval x)) eq2
  // let ch1 = Prop.Equal.chain chn ev1
  // ?
// Lemma354 (Term.tif t1 t12 t13) t2 t3 (Step.sif cond1 cond1_ true1 false1 step1) s = _

Cond.is_eql
  <t1: Term>
  <t2: Term>
  <t3: Term>
  <t4: Term>
  <cond1: Term>
  <cond2: Term>
  (pf1: Prop.Equal t1 t3)
  (pf2: Prop.Equal t2 t4)
  (e1: Prop.Equal (Term.tif cond1 t1 t2) (Term.tif cond1 t3 t4))
  (e2: Prop.Equal (Term.tif cond2 t1 t2) (Term.tif cond2 t3 t4))
  : Prop.Equal cond1 cond2
Cond.is_eql t1 t2 t3 t4 Term.false Term.false pf1 pf2 e1 e2 = Prop.Equal.refl
Cond.is_eql t1 t2 t3 t4 Term.true  Term.true  pf1 pf2 e1 e2 = Prop.Equal.refl
Cond.is_eql t1 t2 t3 t4 cond1 cond2 pf1 pf2 e1 e2           = Data.Empty.absurd _


Term.is_bool (a: Term)  : Data.Bool
Term.is_bool Term.true  = Data.Bool.true
Term.is_bool Term.false = Data.Bool.true
Term.is_bool a          = Data.Bool.false

Term.is_true (a: Term)  : Data.Bool
Term.is_true Term.true  = Data.Bool.true
Term.is_true a          = Data.Bool.false

Term.is_false (a: Term)   : Data.Bool
Term.is_false Term.false  = Data.Bool.true
Term.is_false a           = Data.Bool.false

// Term.true_not_true (e: (Prop.Equal Term Term.true Term.true)) : Data.Empty
// Term.true_not_true e = Data.Empty.absurd ?

#partial
Term.true_is_false (b: Term) (e: Prop.Not (Prop.Equal Term b Term.true)) : Prop.Equal Term b Term.false
Term.true_is_false Term.false e = Prop.Equal.refl
Term.true_is_false Term.true  e = Data.Empty.absurd (e Prop.Equal.refl)
// Term.true_is_false b e = Term.true_is_false Term.true e




// type Step ~(a: Term) (k: Term) {
  // if_true  (t2: Term) (t3: Term) : Step (Term.if Term.true  t2 t3) t2
  // if_false (t2: Term) (t3: Term) : Step (Term.if Term.false t2 t3) t3
  // if (cond1: Term) (cond2: Term) (t2: Term) (t3: Term) (s1: Step cond1 cond2)
    // : Step (Term.if cond1 t2 t3) (Term.if cond2 t2 t3)
// }

#partial
Eval.cond <c: Term> <tru: Term> <fls: Term> (t: Term) : Term
Eval.cond (Term.tif c tru fls) = c
// Eval.cond t = Term.false

#partial
Eval.if <c: Term> <tru: Term> <fls: Term> (t: Term) : Term
Eval.if (Term.tif c tru fls) = tru
// Eval.if t = Term.false

Congr.arg <a: Type> <b: Type> <x: a> <y: a> (f: a -> b) (eq: Prop.Equal x y) : Prop.Equal (f x) (f y)
Congr.arg f prf = Prop.Equal.apply (k => f k) prf

Steper (e: Term) : Term
Steper (Term.tif Term.true  t2 t3) = t2
Steper (Term.tif Term.false t2 t3) = t3
Steper e                           = Eval e

Extract.steper (m: Data.Maybe Term) : Term
Extract.steper (Data.Maybe.some t1) = t1
Extract.steper Data.Maybe.none      = Term.false

// 3.5.5
#partial
IsNormalForm (e: Term)  : Data.Bool
IsNormalForm Term.true  = Data.Bool.true
IsNormalForm Term.false = Data.Bool.true
// IsNormalForm Term.zero  = Data.Bool.false
IsNormalForm (Term.tif t1 t2 t3) = Data.Bool.false

IsValue (e: Term)   : Data.Bool
IsValue Term.true   = Data.Bool.true
IsValue Term.false  = Data.Bool.true
IsValue n           = Data.Bool.false

IsValueInNormalForm (e: Value)  : Data.Bool
IsValueInNormalForm Value.true  = Data.Bool.true
IsValueInNormalForm Value.false = Data.Bool.true
IsValueInNormalForm e           = Data.Bool.false

type NormalForm ~(t: Term) {
  true : NormalForm Term.true
  false: NormalForm Term.false
}

NormalFormb (t: Term) : Type
NormalFormb t         = (u: Term) -> Prop.Not (Step t u)

type Valueb ~(t: Term) {
  true : Valueb Term.true
  false: Valueb Term.false
}
// isNormalForm : Term -> Bool
// isNormalForm t = not (isValue t) || case t of
  // TIf t1 _ _ => not (isValue t1) && isNormalForm t1
  // _ => False
IsNormalForm1 (e: Term) : Data.Bool  
IsNormalForm1 e = Data.Bool.or (Data.Bool.not (IsValue e)) (
    match Term e {
      tif   => Data.Bool.and (Data.Bool.not (IsValue e.tp)) (IsNormalForm1 e.tp)
      true  => Data.Bool.false
      false => Data.Bool.false
    }
  )


// 3.5.8
// theorem : (t : Term) -> (isNormalForm : isNormalFormValue t = True) -> isValue t = True
Theorem358 (t: Term) (is: Prop.Equal (IsNormalForm t) Data.Bool.true) : Prop.Equal (IsValue t) Data.Bool.true
Theorem358 Term.true is           = is
Theorem358 Term.false is          = is
Theorem358 (Term.tif t1 t2 t3) is = Data.Empty.absurd (Data.Bool.false_not_true is)


// 3.5.9
#derive[match]
type MultiStep ~(t1: Term) (t2: Term) {
  refl (t: Term) : MultiStep t t
  step (t3: Term) (t4: Term) (t5: Term) (s: Step t3 t4) (m: MultiStep t4 t5) : MultiStep t3 t5
}

Eval.zero (t: Term) : MultiStep t t
Eval.zero t = MultiStep.refl t

Eval.one (t1: Term) (t2: Term) (s: Step t1 t2) : MultiStep t1 t2
Eval.one t1 t2 s = MultiStep.step t1 t2 t2 s (MultiStep.refl t2)

Eval.multi (t1: Term) (t2: Term) (t3: Term) (s: MultiStep t1 t2) (m: MultiStep t2 t3) : MultiStep t1 t3
Eval.multi t1 t2 t3 (MultiStep.refl t) m = 
  let eq1 = Prop.Equal.refl :: Prop.Equal t  t1
  let eq2 = Prop.Equal.refl :: Prop.Equal t2 t
  let ch1 = Prop.Equal.chain eq2 eq1
  Prop.Equal.rewrite ch1 (x => (MultiStep x t3)) m
Eval.multi t1 t2 t3 (MultiStep.step t4 t5 t6 s1 s2) m = MultiStep.step t4 t5 t3 s1 (Eval.multi t5 t6 t3 s2 m)

type EvalStep ~(a: Term) (b: Term){
  iftrue  <t2: Term> <t3: Term> : EvalStep (Term.tif Term.true  t2 t3) t2
  iffalse <t2: Term> <t3: Term> : EvalStep (Term.tif Term.false t2 t3) t3
  ifif    <t1: Term> <t1_: Term> <t2: Term> <t3: Term> (e: EvalStep t1 t1_) : EvalStep (Term.tif t1 t2 t3) (Term.tif t1_ t2 t3)
}


// 3.5.11
Determinacy (t: Term) (t1: Term) (t2: Term) : Type
Determinacy t t1 t2 = (e1: EvalStep t t1) -> (m1: MultiStep t1 t2) -> (t3: Term) -> (m2: MultiStep t1 t3) -> Prop.Equal t2 t3


// eval_trans : MultiStepEval t u -> MultiStepEval u u' -> MultiStepEval t u'
// eval_trans eval_u_u' eval'_u'_u'' = MS_Trans eval1 eval_u_u' eval'_u'_u''
Eval.trans  <t: Term> <u: Term> <u1: Term> (e1: MultiStep t u) (e2: MultiStep u u1) : MultiStep t u1
Eval.trans t u u1 (MultiStep.refl t1) e2 = 
  let eq1 = Prop.Equal.refl :: Prop.Equal t1 u
  let eq2 = Prop.Equal.refl :: Prop.Equal t t1
  let ch1 = Prop.Equal.chain eq2 eq1
  Prop.Equal.rewrite (Prop.Equal.mirror ch1) (x => (MultiStep x u1)) e2
Eval.trans t u u1 (MultiStep.step t1 t2 t3 s1 m1) e2 = 
  let eq1 = Prop.Equal.refl :: Prop.Equal t1 t
  let eq2 = Prop.Equal.refl :: Prop.Equal t3 u
  let tst = Eval.multi t1 t2 t3 (Eval.one t1 t2 s1) m1
  let rw1 = Prop.Equal.rewrite eq1 (x => (MultiStep x t3)) tst
  let rw2 = Prop.Equal.rewrite eq2 (x => (MultiStep t x)) rw1
  Eval.multi t u u1 rw2 e2
  
// eval_trans : MultiStepEval t u -> MultiStepEval u u' -> MultiStepEval t u'
// eval_trans eval_u_u' eval'_u'_u'' = MS_Trans eval1 eval_u_u' eval'_u'_u''

// eval_sym : MultiStepEval t u' -> MultiStepEval t u 
// eval_sym eval_u'_u'' = MS_Trans eval2 (MS_Refl u') (MS_Sym eval_u'_u'')

// eval_u'_u'' : MultiStepEval t u'
// eval_u'_u'' = eval_trans eval1 (eval_sym eval2)

// eq_u_u' : u = u'
// eq_u_u' = proof_irrelevance u u'
// Eval_u_u1 <t: Term> <u: Term> <u1: Term> <e1: MultStep t u> <e2: MultStep u u1> : MultStep t u
// Eval_u_u1 t u u1 e1 e2 = Eval.trans e1 (Eval.sym e2)

    // eq_u_u' : u = u'
    // eq_u_u' = proof_irrelevance u u'

// eval_sym : MultiStepEval t u' -> MultiStepEval t u 
// eval_sym eval_u'_u'' = MS_Trans eval2 (MS_Refl u') (MS_Sym eval_u'_u'')
// Eval.sym <t: Term> <u: Term> <u1: Term> (e1: MultStep t u1) : MultStep t u
// Eval.sym t u u1 e1 = ?


// theorem_uniqueness : (t u u' : Term) -> MultiStepEval t u -> MultiStepEval t u' -> NormalForm u -> NormalForm u' -> Equal u u'
// theorem_uniqueness t u u' e1 e2 nf_u nf_u' =
  // let
    // eval_sym : MultiStepEval t u' -> MultiStepEval t u
    // eval_sym eval_u'_u'' = MS_Trans e2 (MS_Refl u') (MS_Sym eval_u'_u'')
  // in
    // cong (eval_sym e1) (cong (eval_sym e2) (theorem_3_5_4 u TBool nf_u nf_u'))
 // If t → t0 and t → t00 then t0 = t00.
Theorem3511 
  <t  : Term>
  <t0 : Term>
  <t00: Term>
  (nf_t0 : NormalFormb t0)
  (nf_t00: NormalFormb t00)
  (e1: MultiStep t t0)
  (e2: MultiStep t t00)
  : Prop.Equal t0 t00
Theorem3511 t t0 t00 nf_t0 nf_t00 (MultiStep.refl e1) (MultiStep.refl e2) = 
  let eq1 = Prop.Equal.refl :: Prop.Equal t0 e1
  let eq2 = Prop.Equal.refl :: Prop.Equal e1 t
  let eq3 = Prop.Equal.refl :: Prop.Equal e2 t00
  let eq4 = Prop.Equal.refl :: Prop.Equal t e2
  Prop.Equal.chain (Prop.Equal.chain eq1 eq2)(Prop.Equal.chain eq4 eq3)
Theorem3511 t t0 t00 nf_t0 nf_t00 (MultiStep.step t1 t2 t3 s1 m1) (MultiStep.step t1_ t2_ t3_ s1_ m1_) =
  let eq1 = Prop.Equal.refl :: Prop.Equal t3  t0
  let eq2 = Prop.Equal.refl :: Prop.Equal t3_ t00
  let eq3 = Prop.Equal.refl :: Prop.Equal t1  t
  let eq4 = Prop.Equal.refl :: Prop.Equal t1_ t
  let on1 = Eval.one t1 t2 s1
  let tr1 = Eval.trans t1 t2 t3 on1 m1
  let on2 = Eval.one t1_ t2_ s1_
  let tr2 = Eval.trans t1_ t2_ t3_ on2 m1_
  let rw1 = Prop.Equal.rewrite eq3 (x => (MultiStep x t3))  tr1
  let rw2 = Prop.Equal.rewrite eq4 (x => (MultiStep x t3_)) tr2
  let ind = Theorem3511 t t3 t3_ nf_t0 nf_t00 rw1 rw2
  let rw3 = Prop.Equal.rewrite eq1 (x => (Prop.Equal x t3_)) ind
  Prop.Equal.rewrite eq2 (x => (Prop.Equal t0 x)) rw3
Theorem3511 t t0 t00 nf_t0 nf_t00 (MultiStep.step t1 t2 t3 s1 m1) (MultiStep.refl e2) = 
  let eq1 = Prop.Equal.refl :: Prop.Equal t3 t0
  let eq2 = Prop.Equal.refl :: Prop.Equal t1 t
  let eq3 = Prop.Equal.refl :: Prop.Equal e2 t00
  let eq4 = Prop.Equal.refl :: Prop.Equal t e2
  let ch1 = Prop.Equal.chain eq4 eq3
  let rw1 = Prop.Equal.rewrite ch1 (x => Step x t2 ) s1
  let nf1 = nf_t00 t2 rw1
  Data.Empty.absurd nf1
Theorem3511 t t0 t00 nf_t0 nf_t00 (MultiStep.refl e1) (MultiStep.step t1 t2 t3 s1 m1) =
  let eq1 = Prop.Equal.refl :: Prop.Equal t3 t00 
  let eq2 = Prop.Equal.refl :: Prop.Equal t1  t
  let eq3 = Prop.Equal.refl :: Prop.Equal e1 t0
  let eq4 = Prop.Equal.refl :: Prop.Equal t  e1
  let ch1 = Prop.Equal.chain eq4 eq3
  let ch2 = Prop.Equal.chain eq2 ch1
  let rw1 = Prop.Equal.rewrite ch2 (x => Step x t2) s1
  let nf1 = nf_t0 t2 rw1
  Data.Empty.absurd nf1

//3.5ch
// For every term t there is some normal form t0 such that t -→∗t
// Measure <t: Term> : Data.Nat
// Measure t = Size t
  //   terminationStep : (t : Term) -> (size : Nat) ->
  //                     Sigma (t0 : Term) (EvalStep t t0 /\ sizeOfTerm t0 < size)
// TerminationStep
  // <t: Term>
  // (size: Data.Nat)
  // : [t0: Term] -> (Data.Pair (MultiStep t t0) (Le (Size t0) size))
// TerminationStep Term.true (Data.Nat.succ Data.Nat.zero) =
  // let ms = MultiStep.refl Term.true
  // Data.Sigma.new Term.true (Data.Pair.new ms (Le.n (Size Term.true)))
  // ?
  //   terminationStep t size =
  //     case evalStep t of
  //       Left _ => (t, (t, LT_refl))
  //       Right t' => let (t0, (evalStepT0, sizeT0)) = terminationStep t' size in
  //                   (t0, (evalStepT0, LT_le_S sizeT0))
  // in
  //   wellFounded measure terminationStep t

#partial
Theorem3512
  <t: Term>
  : [t0: Term] -> (Data.Pair (Prop.Equal Data.Bool.true (IsNormalForm t0)) (MultiStep t t0))
Theorem3512 Term.true =
  let t0 = Term.true
  let nf_t0 = Prop.Equal.refl :: Prop.Equal Data.Bool.true (IsNormalForm Term.true)
  let ms_t_t0 = MultiStep.refl t0
  let par = Data.Pair.new nf_t0 ms_t_t0
  Data.Sigma.new Term.true par
Theorem3512 Term.false =
  let t0 = Term.false
  let nf_t0 = Prop.Equal.refl :: Prop.Equal Data.Bool.true (IsNormalForm Term.true)
  let ms_t_t0 = MultiStep.refl t0
  let par = Data.Pair.new nf_t0 ms_t_t0
  Data.Sigma.new Term.false par
Theorem3512 (Term.tif t1 t2 t3) = 
  let ind = Theorem3512 t1
  match Data.Sigma ind {
    new fst snd =>
      let uno  = fst
      let duo  = snd
      // let ind2 = Theorem3512 t2
      // let Data.Sigma.new fst snd = ind2
      // let ms2  = Data.Pair.snd snd
      // let ind3 = Theorem3512 t3
      // let Data.Sigma.new fst snd = ind3
      // let ms3  = Data.Pair.snd snd
      Data.Sigma.new uno (Data.Pair.new (Data.Pair.fst duo) ?)
  }

  // ?
// Theorem3512 (Term.tif Term.true t2 t3) =
  // let ind = Theorem3512 t2
  // let t0 = Term.tif Term.true (Data.Sigma.fst ind) t3

  // ?


  // Data.Sigma.new Term.true (Data.Pair.new ((u: Term) => (s: Step Term.true u) => _ ) (MultiStep.refl Term.true))

// #partial
// NormalFormc <t: Term> (u: Term) (s: Step t u) (p: Prop.Equal (IsNormalForm t) (IsNormalForm u)) : Data.Empty
// NormalFormc (Term.tif t1 t2 t3) Term.true  s p = Data.Empty.absurd (Data.Bool.false_not_true p)
// NormalFormc (Term.tif t1 t2 t3) Term.false s p = Data.Empty.absurd (Data.Bool.false_not_true p)
// NormalFormc Term.true  (Term.tif t1 t2 t3) s p = Data.Empty.absurd (Data.Bool.true_not_false p)
// NormalFormc Term.false (Term.tif t1 t2 t3) s p = Data.Empty.absurd (Data.Bool.true_not_false p)
// // NormalFormc Term.true  Term.true  s p          = ?
// // NormalFormc Term.true  Term.false s p          = ?
// // NormalFormc Term.false Term.true  s p          = ?
// // NormalFormc Term.false Term.false s p          = ?
// // NormalFormc (Term.tif t1 t2 t3 ) (Term.tif t4 t5 t6) s p = ?
// // ?
//

// Theorem3512
//   <t: Term>
//   : [t0: Term] -> (Data.Pair (Prop.Equal (IsNormalForm t0) Data.Bool.true) (MultiStep t t0))
// Theorem3512 Term.true =
//   Data.Sigma.new Term.true (Data.Pair.new (Prop.Equal.refl) (MultiStep.refl Term.true))
// Theorem3512 Term.false =
//   Data.Sigma.new Term.false (Data.Pair.new (Prop.Equal.refl) (MultiStep.refl Term.false))
// Theorem3512 (Term.tif t1 t2 t3) =
//   let ind1 = Theorem3512 t2
//   let Data.Sigma.new fst snd = ind1
//   let evf = Eval.zero fst
//   let evt = Eval.zero (Term.tif t1 t2 t3)
//   ?
//



// TheoremTermination (t: Term) : [u: Term] -> Data.Pair (MultiStep t u) (Prop.Equal Data.Bool Data.Bool.true (IsNormalForm u))
//     TheoremTermination t =
//         Apps.HVM.log t (
//         match Term t {
//             true  => $ Term.true (Data.Pair.new (MultiStep.refl Term.true) Prop.Equal.refl)
//             false => $ Term.false (Data.Pair.new (MultiStep.refl Term.false) Prop.Equal.refl)
//             tif cond tp fp =>
//                 let ind = TheoremTermination cond
//                 let Data.Sigma.new fst snd = ind
//                   ?
//                 // match Data.Sigma ind {//with (tp: Term) (cond: Term) (fp: Term) {
//                     // new fst snd => ?
//                         // match Term fst with (snd : (Data.Pair (MultiStep cond fst) (Prop.Equal Data.Bool Data.Bool.true (IsNormalForm fst)))) {
//                             // true => ?
//                             // false => ?
//                             // tif cond tp fp => ?
//                         // }
//                 // }
// } : [u: Term] -> Data.Pair (MultiStep t u) (Prop.Equal Data.Bool Data.Bool.true (IsNormalForm u))
// )
//







type BadNat{
  wrong
  true
  false
}

type BadBool{
  wrong
  num (e: Num)
}

Main {
  let test1 = Term.tif Term.true Term.true (Eval (Term.tif Term.false Term.false Term.false))
  let test2 = Term.tif Term.true (Eval (Term.tif Term.false Term.false Term.false)) test1
  let test3 = Le.S (Le.n 4n)
  let test4 = Le.S (Le.n 3n)
  // (Eval test1)
  (IsNormalForm Term.true)
}

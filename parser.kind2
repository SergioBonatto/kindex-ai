type Term {
  true
  false
  zero
  succ   (t: Term)
  pred   (t: Term)
  iszero (t: Term)
  if     (cond: Term) (truePath: Term) (falsePath: Term)
}

type Value {
  True
  False
  Num (n: Num)
}

type Num {
  zeroval
  succval (n: Num)
}

Consts (e: Term)          : Data.List (Term)
Consts (Term.true)        = [Term.true]
Consts (Term.false)       = [Term.false]
Consts (Term.zero)        = [Term.zero]
Consts (Term.succ t1)     = Consts(t1)
Consts (Term.pred t1)     = Consts(t1)
Consts (Term.iszero t1)   = Consts(t1)
Consts (Term.if t1 t2 t3) = Data.List.concat (Consts(t1)) (Data.List.concat (Consts(t2)) (Consts(t3)))

Size (e: Term)          : Data.U60
Size (Term.true)        = 1
Size (Term.false)       = 1
Size (Term.zero)        = 1
Size (Term.succ t1)     = (+ (Size(t1)) 1)
Size (Term.pred t1)     = (+ (Size(t1)) 1)
Size (Term.iszero t1)   = (+ (Size(t1)) 1)
Size (Term.if t1 t2 t3) = (+ (+ (+ (Size (t1)) (Size(t2))) (Size(t3))) 1)

Depth (e: Term)          : Data.U60
Depth (Term.true)        = 1
Depth (Term.false)       = 1
Depth (Term.zero)        = 1
Depth (Term.succ t1)     = (+ (Depth(t1)) 1)
Depth (Term.pred t1)     = (+ (Depth(t1)) 1)
Depth (Term.iszero t1)   = (+ (Depth(t1)) 1)
Depth (Term.if t1 t2 t3) = (+ (Data.U60.max (Depth(t1)) (Data.U60.max (Depth(t2)) (Depth(t3)))) 1)

// #partial
Eval (e: Term) : Term
Eval (Term.if Term.true t1 t2)    = t1
Eval (Term.if Term.false t1 t2)   = t2
Eval (Term.if t1 t2 t3)           = Term.if (Eval t1) t2 t3
Eval (Term.succ t1)               = Term.succ (Eval t1)
Eval (Term.pred Term.zero)        = Term.zero
Eval (Term.pred (Term.succ t1))   = t1
Eval (Term.pred t1)               = Term.pred (Eval t1)
Eval (Term.iszero Term.zero)      = Term.true
Eval (Term.iszero (Term.succ t1)) = Term.false
Eval (Term.iszero t1)             = Term.iszero (Eval t1)
Eval e = e

type BadNat{
  wrong
  true
  false
}

type BadBool{
  wrong
  num (e: Num)
}

// eval : Term -> Term
// eval (Succ (BadNat _)) = Wrong
// eval (Pred (BadNat _)) = Wrong
// eval (IsZero (BadNat _)) = Wrong
// eval (If (BadBool _) _ _) = Wrong
// eval t = ?missingCaseError
EvalBad (e: Term) : Term
EvalBad (Term.succ (BadNat.wrong)) = BadNat.wrong

Main {
  let test1 = Term.if Term.true Term.true (Term.if Term.false Term.false Term.false)
  let test2 = Term.if Term.true (Term.if Term.false Term.false Term.false) Term.true
  //               if      true then (if      false then false else false) else true
  (Size test2)

}
